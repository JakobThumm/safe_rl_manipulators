<?xml version="1.0" encoding="UTF-8"?>
<launch>
  <arg name="robot_name" default="modrob0"/>

  <!-- Use the advanced verification that allows safe actions near humans -->
  <arg name="advanced_verify_iso" default="true" />
  <param name="advanced_verify_iso" value="$(arg advanced_verify_iso)"/>
  <param name="startup_time" value="5"/>

  <arg name="put_robot_in_world" default="true" />
  <arg name="put_robot_in_world_package" default="$(find modrob_simulation)" />
  <arg name="put_robot_in_world_launch" default="put_robot_in_world_path_following" />

  <arg name="x" default="0.0"/>
  <arg name="y" default="0.0"/>
  <arg name="z" default="0.0"/>
  <arg name="roll" default="0.0"/>
  <arg name="pitch" default="0.0"/>
  <arg name="yaw" default="0.0"/>

  <!-- Activate the parts that you want to use.-->
  <arg name="use_failsafe_planner" default="true"/>
  <arg name="use_sim_time_control" default="true"/>
  <arg name="use_robot_reach" default="false"/>
  <arg name="use_human_cylinder" default="false"/>
  <arg name="use_verify_ISO" default="false"/>
  <arg name="use_control_command_translator" default="true"/>
  <arg name="use_human_reach" default="true"/>
  <arg name="use_rviz_plugin" default="false"/>

  <group if="$(arg put_robot_in_world)">
      <include file="$(arg put_robot_in_world_package)/launch/$(arg put_robot_in_world_launch).launch">
        <arg name="robot_name" value="$(arg robot_name)"/>
        <arg name="init_x" value="$(arg x)"/>
        <arg name="init_y" value="$(arg y)"/>
        <arg name="init_z" value="$(arg z)"/>
        <arg name="roll" value="$(arg roll)"/>
        <arg name="pitch" value="$(arg pitch)"/>
        <arg name="yaw" value="$(arg yaw)"/>
      </include>
  </group>

  

  <node pkg="nodelet" type="nodelet" name="standalone_nodelet" args="manager" output="screen"/>
  <!--<node name="initialisation" type="initialisation_node" pkg="initialisation"/>-->

  <group if="$(arg use_failsafe_planner)">
      <rosparam file = "$(find failsafe_consistent_planner)/config/parameters_$(arg robot_name).yaml" />
      <node pkg="nodelet" type="nodelet" name="FailsafeConsistentNodelet" args="load online_verification/FailsafeConsistentNodelet standalone_nodelet" output="screen"/>
  </group>
  <group if="$(arg use_sim_time_control)">
      <rosparam file = "$(find simulation_time_control)/config/parameters_step_control.yaml" />
      <node pkg="nodelet" type="nodelet" name="SimulationTimeControlNodelet" args="load simulation_time_control/SimulationTimeControlNodelet standalone_nodelet" output="screen"/>
  </group>
  <group if="$(arg use_human_cylinder)">
      <rosparam file = "$(find human_cylinder)/config/sensors_parameters.yaml" />
      <node pkg="nodelet" type="nodelet" name="HumanCylinderNodelet" args="load human_cylinder/HumanCylinderNodelet standalone_nodelet" output="screen"/>
  </group>
  <group if="$(arg use_human_reach)">
      <rosparam file = "$(find human_reach)/config/cmu_mocap_no_hand.yaml" />
      <node pkg="nodelet" type="nodelet" name="HumanReachNodelet" args="load human_reach/HumanReachNodelet standalone_nodelet" output="screen"/>
  </group>
  <rosparam file = "$(find robot_reach)/config/robot_parameters_$(arg robot_name).yaml" />
  <group if="$(arg use_robot_reach)">
      <node pkg="nodelet" type="nodelet" name="RobotReachNodelet" args="load robot_reach/RobotReachNodelet standalone_nodelet" output="screen"/>
  </group>
  <group if="$(arg use_verify_ISO)">
      <node pkg="nodelet" type="nodelet" name="VerifyISONodelet" args="load verify_iso/VerifyISONodelet standalone_nodelet" output="screen"/>
  </group>
  <group unless="$(arg use_verify_ISO)">
      <node pkg="nodelet" type="nodelet" name="FakeSafety" args="load fake_safety/FakeSafetyNodelet standalone_nodelet" output="screen"/>	
  </group>
  <group if="$(arg use_control_command_translator)">
      <rosparam file = "$(find control_command_translator)/config/parameters_$(arg robot_name).yaml" />
      <node pkg="nodelet" type="nodelet" name="ControlCommandTranslatorNodelet" args="load control_command_translator/ControlCommandTranslatorNodelet standalone_nodelet" output="screen"/>
  </group>
  <group if="$(arg use_rviz_plugin)">
    <node pkg="nodelet" type="nodelet" name="RvizMarkerNodelet" args="load rviz_marker/RvizMarkerNodelet standalone_nodelet"/>
    <node type="rviz" name="rviz" pkg="rviz" args="-d $(find human_reach)/config/config.rviz" />    
  </group>  

</launch>